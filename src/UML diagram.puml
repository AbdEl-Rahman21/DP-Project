@startuml
package Boarding <<Frame>> {
  interface BoardingType {
    + {abstract} getCost() : double
  }

  class BedAndBreakfast implements BoardingType {
    + getCost() : double
  }

  class HalfBoard implements BoardingType {
    + getCost() : double
  }

  class FullBoard implements BoardingType {
    + getCost() : double
  }

  class BoardingFactory {
    + createBoarding(boardingType: String) : BoardingType
  }
}

package Employee <<Frame>> {
  class Worker {
    - ID : int
    - name : String
    - email : String
    - phoneNumber : String
    - salary : double
    - jobTitle : String

    + Worker(ID : int, name : String, email : String, phoneNumber : String, salary : double, jobTitle : String)

    + getID() : int

    + getName() : String

    + setName(name : String) : void

    + getEmail() : String

    + setEmail(email : String) : void

    + getPhoneNumber() : String

    + setPhoneNumber(phoneNumber : String) : void

    + getSalary() : double

    + setSalary(salary : double) : void

    + getJobTitle() : String

    + setJobTitle(jobTitle : String) : void
  }
}

package Registry <<Frame>> {
  package BookingOperations <<Frame>> {
    abstract class BookingOperation {
      # BOOKING_DATA : ArrayList<String>
      # REGISTRY : Registry

      + BookingOperation(BOOKING_DATA : ArrayList<String>)

      + execute() : void

      # {abstract} preOperation() : void

      # {abstract} doOperation() : void
    }

    class AddBooking extends BookingOperation {
      - roomNumber : int

      # preOperation() : void

      # doOperation() : void
    }

    class EditBooking extends BookingOperation {
      - bookingIndex : int

      # preOperation() : void

      # doOperation() : void
    }
  }

  package ResidentOperations <<Frame>> {
    abstract class ResidentOperation {
      # RESIDENT_DATA : ArrayList<String>
      # REGISTRY : Registry
      # residentIndex : int

      + ResidentOperation(RESIDENT_DATA : ArrayList<String>)

      + execute() : void

      # preOperation() : void

      # {abstract} doOperation() : void
    }

    class AddResident extends ResidentOperation {
      # preOperation() : void

      # doOperation() : void
    }

    class EditResident extends ResidentOperation {
      # doOperation() : void
    }

    class DeleteResident extends ResidentOperation {
      # doOperation() : void
    }
  }

  package WorkerOperations <<Frame>> {
    abstract class WorkerOperation {
      # WORKER_DATA : ArrayList<String>
      # REGISTRY : Registry
      # workerIndex : int

      + WorkerOperation(WORKER_DATA : ArrayList<String>)

      + execute() : void

      # preOperation() : void

      # {abstract} doOperation() : void
    }

    class AddWorker extends WorkerOperation {
      # preOperation() : void

      # doOperation() : void
    }

    class EditWorker extends WorkerOperation {
      # doOperation() : void
    }

    class DeleteWorker extends WorkerOperation {
      # doOperation() : void
    }
  }

  class Registry {
    - {static} REGISTRY : Registry
    - workers : ArrayList<Worker>
    - residents : ArrayList<Resident>
    - rooms : ArrayList<Room>
    - bookings : ArrayList<Booking>

    - Registry()

    + {static} getInstance() : Registry

    + getWorkers() : ArrayList<Worker>

    + setWorkers(workers : ArrayList<Worker>) : void

    + addWorker(newWorker : Worker) : void

    + removeWorker(workerIndex : int) : void

    + editWorker(workerIndex : int, newWorker : Worker) : void

    + getResidents() : ArrayList<Resident>

    + setResidents(residents : ArrayList<Resident>) : void

    + addResident(newResident : Resident) : void

    + removeResident(residentIndex : int) : void

    + editResident(residentIndex : int, newResident : Resident) : void

    + getRooms() : ArrayList<Room>

    + setRooms(rooms : ArrayList<Room>) : void

    + freeRoom(roomNumber : int) : void

    + getBookings() : ArrayList<Booking>

    + setBookings(bookings : ArrayList<Booking>) : void

    + addBooking(newBooking : Booking) : void

    + editBooking(bookingIndex : int, newBooking : Booking) : void

    + getBookingCopy(bookingIndex : int) : Booking
  }
}

package Reports <<Frame>> {
  interface Report {
    + {abstract} generateReport() : double
  }

  class WeeklyReports implements Report {
    + generateReport() : double
  }

  class MonthlyReports implements Report {
    + generateReport() : double
  }

  class YearlyReports implements Report {
    + generateReport() : double
  }
}

package Reservation <<Frame>> {
  class Booking {
    - {static} lastId : int
    - ID : int
    - FACTORY : BoardingFactory
    - DATE : LocalDate
    - roomNumber : int
    - durationOfStay : int
    - boardingType : String

    + Booking(roomNumber : int, durationOfStay : int, boardingType : String)

    + Booking(ID : int, roomNumber : int, durationOfStay : int, boardingType : String, DATE : LocalDate)

    + {static} getLastId() : int

    + {static} setLastId(lastId : int) : void

    + getDATE() : LocalDate

    + getID() : int

    + getRoomNumber() : int

    + setRoomNumber(roomNumber : int) : void

    + getDurationOfStay() : int

    + setDurationOfStay(durationOfStay : int) : void

    + getFACTORY() : BoardingFactory

    + getBoardingType() : String

    + setBoardingType(boardingType : String) : void

    + calculateCost() : double

    + clone() : Object
  }

  class Resident {
    - PHONE_NUMBER : String
    - BOOKING_ID : int
    - name : String
    - age : int
    - serviceList : String

    + Resident(name : String, age : int, PHONE_NUMBER : String, BOOKING_ID : int)

    + getName() : String

    + setName(name : String) : void

    + getAge() : int

    + setAge(age : int) : void

    + getPHONE_NUMBER() : String

    + getBOOKING_ID() : int

    + getServiceList() : String

    + setServiceList(serviceList : String) : void
  }
}

package Room <<Frame>> {
  abstract class Room {
    # available : boolean

    + Room(available : boolean)

    + isAvailable() : boolean

    + setAvailability(available : boolean) : void

    + {abstract} getCost() : double
  }

  class SingleRoom extends Room {
    + double getCost() : double
  }

  class DoubleRoom extends Room {
    + double getCost() : double
  }

  class TripleRoom extends Room {
    + double getCost() : double
  }

  class RoomFactory {
    + createRoom(RoomType : String, available : boolean) : Room
  }
}

package Utility <<Frame>> {
  class Utility {
    + {static} getPreviousWeek(date : LocalDate) : LocalDate[]

    + {static} getPreviousMonth(date : LocalDate) : LocalDate[]

    + {static} getPreviousYear(date : LocalDate) : LocalDate[]
  }

  class Files {
    + {static} saveWorkers() : void

    + {static} readWorkers() : void

    + {static} saveResidents() : void

    + {static} readResidents() : void

    + {static} saveBookings() : void

    + {static} readBookings() : void

    + {static} saveRooms() : void

    + {static} readRooms() : void
  }
}

class Main {
  + {static} main(args : String[]) : void
}

class HotelManagement <<GUI>> {
  - REGISTRY : Registry
  - report : Report
  - isReceptionist : boolean

  + HotelManagement()
}

Main .down.> Utility.Files

Main .right.> HotelManagement

Reports .left.> Utility.Utility

Room.RoomFactory --> Room.Room
Registry.Registry --> Room.Room
Reservation.Booking .up.> Room.Room

HotelManagement --> Reports.Report

Utility.Files ..> Room.RoomFactory

Utility.Files .left.> Employee.Worker
Registry.Registry -left-> Employee.Worker
Registry.WorkerOperations .left.> Employee.Worker

Reservation.Booking --> Boarding.BoardingFactory

Boarding.BoardingFactory --> Boarding.BoardingType

Reports ..> Reservation.Booking
Utility.Files ..> Reservation.Booking
Registry.Registry --> Reservation.Booking
Registry.BookingOperations .right.> Reservation.Booking

Utility.Files ..> Reservation.Resident
Registry.Registry --> Reservation.Resident
Reservation.Booking --o Reservation.Resident
Registry.ResidentOperations ..> Reservation.Resident

Reports ..> Registry.Registry
Utility.Files ..> Registry.Registry
HotelManagement -left-> Registry
Registry.WorkerOperations -up-> Registry.Registry
Registry.BookingOperations -up-> Registry.Registry
Registry.ResidentOperations -up-> Registry.Registry
@enduml
